{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers,\n      credentials\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n    this._credentials = 'include';\n  }\n  //Проверка ответа\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n  //Обработка данных ответа\n  _handleData(url, _ref2) {\n    let {\n      method,\n      credentials,\n      headers,\n      body\n    } = _ref2;\n    return fetch(`${this._baseUrl}${url}`, {\n      method,\n      headers,\n      credentials,\n      body\n    }).then(this._checkResponse);\n  }\n  //Загрузка карточек\n  getInitialCards() {\n    return this._handleData('/cards', {\n      method: 'GET',\n      credentials: 'include',\n      headers: this._headers\n    });\n  }\n  //Загрузка данных пользователя\n  //   getUserData() {\n  getUserInfo() {\n    return this._handleData('/users/me', {\n      method: 'GET',\n      credentials: 'include',\n      headers: this._headers\n    });\n  }\n  //Редактирование профиля\n  patchUserData(data) {\n    return this._handleData(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.description\n      })\n    });\n  }\n\n  // patchUserData(data) {\n  sendUserInfo(data) {\n    return this._handleData('/users/me', {\n      method: 'PATCH',\n      credentials: this._credentials,\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        about\n      })\n    });\n  }\n  sendCardInfo(_ref3) {\n    let {\n      name,\n      link\n    } = _ref3;\n    return this._handleData('/cards', {\n      method: 'POST',\n      credentials: this._credentials,\n      headers: this._headers,\n      body: JSON.stringify({\n        name,\n        link\n      })\n    });\n  }\n  removeCard(cardId) {\n    return this._handleData(`/cards/${cardId}`, {\n      method: 'DELETE',\n      credentials: this._credentials,\n      headers: this._headers\n    });\n  }\n  putLike(cardId) {\n    return this._handleData(`/cards/${cardId}/likes`, {\n      method: 'PUT',\n      credentials: this._credentials,\n      headers: this._headers\n    });\n  }\n  removeLike(cardId) {\n    return this._handleData(`/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      credentials: this._credentials,\n      headers: this._headers\n    });\n  }\n  changeLikeCardStatus(cardId, isLiked) {\n    return isLiked ? this.removeLike(cardId) : this.putLike(cardId);\n  }\n  sendAvatarInfo(avatar) {\n    return this._handleData('/users/me/avatar', {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify(avatar)\n    });\n  }\n}\nconst api = new Api({\n  baseUrl: 'http://localhost:3000',\n  credentials: 'include',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport { api, Api };","map":{"version":3,"names":["Api","constructor","_ref","baseUrl","headers","credentials","_baseUrl","_headers","_credentials","_checkResponse","res","ok","json","Promise","reject","status","_handleData","url","_ref2","method","body","fetch","then","getInitialCards","getUserInfo","patchUserData","data","_url","JSON","stringify","name","about","description","sendUserInfo","sendCardInfo","_ref3","link","removeCard","cardId","putLike","removeLike","changeLikeCardStatus","isLiked","sendAvatarInfo","avatar","api"],"sources":["/Users/dimakablukov/Downloads/react-mesto-api-full-gha-main/frontend/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor({ baseUrl, headers, credentials }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n    this._credentials = 'include';\n  }\n  //Проверка ответа\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n  //Обработка данных ответа\n  _handleData(url, { method, credentials, headers, body }) {\n    return fetch(`${this._baseUrl}${url}`, {\n      method,\n      headers,\n      credentials,\n      body,\n    }).then(this._checkResponse);\n  }\n  //Загрузка карточек\n  getInitialCards() {\n    return this._handleData('/cards', {\n      method: 'GET',\n      credentials: 'include',\n      headers: this._headers,\n    });\n  }\n  //Загрузка данных пользователя\n  //   getUserData() {\n  getUserInfo() {\n    return this._handleData('/users/me', {\n      method: 'GET',\n      credentials: 'include',\n      headers: this._headers,\n    });\n  }\n  //Редактирование профиля\n   patchUserData(data) {\n    return this._handleData(`${this._url}/users/me`, {\n      method: \"PATCH\",\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.description,\n      }),\n    });\n  }\n\n  // patchUserData(data) {\n  sendUserInfo(data) {\n    return this._handleData('/users/me', {\n      method: 'PATCH',\n      credentials: this._credentials,\n      headers: this._headers,\n      body: JSON.stringify({ name, about }),\n    });\n  }\n\n  sendCardInfo({ name, link }) {\n    return this._handleData('/cards', {\n      method: 'POST',\n      credentials: this._credentials,\n      headers: this._headers,\n      body: JSON.stringify({ name, link }),\n    });\n  }\n\n  removeCard(cardId) {\n    return this._handleData(`/cards/${cardId}`, {\n      method: 'DELETE',\n      credentials: this._credentials,\n      headers: this._headers,\n    });\n  }\n\n  putLike(cardId) {\n    return this._handleData(`/cards/${cardId}/likes`, {\n      method: 'PUT',\n      credentials: this._credentials,\n      headers: this._headers,\n    });\n  }\n\n  removeLike(cardId) {\n    return this._handleData(`/cards/${cardId}/likes`, {\n      method: 'DELETE',\n      credentials: this._credentials,\n      headers: this._headers,\n    });\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return isLiked ? this.removeLike(cardId) : this.putLike(cardId);\n  }\n\n  sendAvatarInfo(avatar) {\n    return this._handleData('/users/me/avatar', {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify(avatar),\n    });\n  }\n}\n\nconst api = new Api({\n  baseUrl: 'http://localhost:3000',\n  credentials: 'include',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport { api, Api };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}