{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers,\n      credentials\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n    this._credentials = 'include';\n  }\n  //Проверка ответа\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n  //Обработка данных ответа\n  _handleData(url, _ref2) {\n    let {\n      method,\n      credentials,\n      headers,\n      body\n    } = _ref2;\n    return fetch(`${this._baseUrl}${url}`, {\n      method,\n      headers,\n      credentials,\n      body\n    }).then(this._checkResponse);\n  }\n  //Загрузка карточек\n  getInitialCards() {\n    return this._handleData('/cards', {\n      method: 'GET',\n      credentials: 'include',\n      headers: this._headers\n    });\n  }\n  //Загрузка данных пользователя\n  //   getUserData() {\n  getUserInfo() {\n    return this._handleData('/users/me', {\n      method: 'GET',\n      credentials: 'include',\n      headers: this._headers\n    });\n  }\n  //Редактирование профиля\n  // patchUserData(data) {\n  sendUserInfo(data) {\n    return this._handleData('/users/me', {\n      method: 'PATCH',\n      credentials: this._credentials,\n      headers: this._headers,\n      body: JSON.stringify({\n        name: data.name,\n        about: data.about\n      })\n      // body: JSON.stringify({ name: data.name, about: data.description,\n    });\n  }\n  //Добавление новой карточки\n  // postCard(cardData) {\n  sendCardInfo(cardData) {\n    return this._handleData('/cards', {\n      method: 'POST',\n      credentials: this._credentials,\n      headers: this._headers,\n      body: JSON.stringify(cardData)\n    });\n  }\n  //Удаление карточки\n  // deleteCard(id) {\n  removeCard(id) {\n    return this._handleData(`/cards/${id}`, {\n      method: 'DELETE',\n      credentials: this._credentials,\n      headers: this._headers\n    });\n  }\n  //Обновление аватара пользователя\n  // patchAvatar(avatar) {\n  sendAvatarInfo(avatar) {\n    return this._handleData('/users/me/avatar', {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify(avatar)\n    });\n  }\n  //Постановка лайка\n  putLike(id) {\n    return this._handleData(`/cards/${id}/likes`, {\n      method: 'PUT',\n      credentials: this._credentials,\n      headers: this._headers\n    });\n  }\n  //Снятие лайка\n  // deleteLike(id) {\n  removeLike(id) {\n    return this._handleData(`/cards/${id}/likes`, {\n      method: 'DELETE',\n      credentials: this._credentials,\n      headers: this._headers\n    });\n  }\n  changeLikeCardStatus(cardId, isLiked) {\n    return isLiked ? this.removeLike(cardId) : this.putLike(cardId);\n  }\n}\nconst api = new Api({\n  baseUrl: 'http://localhost:3000',\n  credentials: 'include',\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n//export { api, Api };\nexport default api;","map":{"version":3,"names":["Api","constructor","_ref","baseUrl","headers","credentials","_baseUrl","_headers","_credentials","_checkResponse","res","ok","json","Promise","reject","status","_handleData","url","_ref2","method","body","fetch","then","getInitialCards","getUserInfo","sendUserInfo","data","JSON","stringify","name","about","sendCardInfo","cardData","removeCard","id","sendAvatarInfo","avatar","putLike","removeLike","changeLikeCardStatus","cardId","isLiked","api"],"sources":["/Users/dimakablukov/Downloads/react-mesto-api-full-gha-main/frontend/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor({ baseUrl, headers, credentials }) {\n    this._baseUrl = baseUrl;\n    this._headers = headers;\n    this._credentials = 'include';\n  }\n  //Проверка ответа\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n  }\n  //Обработка данных ответа\n  _handleData(url, { method, credentials, headers, body }) {\n    return fetch(`${this._baseUrl}${url}`, {\n      method,\n      headers,\n      credentials,\n      body,\n    }).then(this._checkResponse);\n  }\n  //Загрузка карточек\n  getInitialCards() {\n    return this._handleData('/cards', {\n      method: 'GET',\n      credentials: 'include',\n      headers: this._headers,\n    });\n  }\n  //Загрузка данных пользователя\n  //   getUserData() {\n  getUserInfo() {\n    return this._handleData('/users/me', {\n      method: 'GET',\n      credentials: 'include',\n      headers: this._headers,\n    });\n  }\n  //Редактирование профиля\n  // patchUserData(data) {\n  sendUserInfo(data) {\n    return this._handleData('/users/me', {\n      method: 'PATCH',\n      credentials: this._credentials,\n      headers: this._headers,\n      body: JSON.stringify({ name: data.name, about: data.about }),\n      // body: JSON.stringify({ name: data.name, about: data.description,\n    });\n  }\n  //Добавление новой карточки\n  // postCard(cardData) {\n  sendCardInfo(cardData) {\n    return this._handleData('/cards', {\n      method: 'POST',\n      credentials: this._credentials,\n      headers: this._headers,\n      body: JSON.stringify(cardData),\n    });\n  }\n  //Удаление карточки\n  // deleteCard(id) {\n  removeCard(id) {\n    return this._handleData(`/cards/${id}`, {\n      method: 'DELETE',\n      credentials: this._credentials,\n      headers: this._headers,\n    });\n  }\n  //Обновление аватара пользователя\n  // patchAvatar(avatar) {\n  sendAvatarInfo(avatar) {\n    return this._handleData('/users/me/avatar', {\n      method: 'PATCH',\n      credentials: 'include',\n      headers: this._headers,\n      body: JSON.stringify(avatar),\n    });\n  }\n  //Постановка лайка\n  putLike(id) {\n    return this._handleData(`/cards/${id}/likes`, {\n      method: 'PUT',\n      credentials: this._credentials,\n      headers: this._headers,\n    });\n  }\n  //Снятие лайка\n  // deleteLike(id) {\n  removeLike(id) {\n    return this._handleData(`/cards/${id}/likes`, {\n      method: 'DELETE',\n      credentials: this._credentials,\n      headers: this._headers,\n    });\n  }\n\n  changeLikeCardStatus(cardId, isLiked) {\n    return isLiked ? this.removeLike(cardId) : this.putLike(cardId);\n  }\n}\n\nconst api = new Api({\n  baseUrl: 'http://localhost:3000',\n  credentials: 'include',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n//export { api, Api };\nexport default api;\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}