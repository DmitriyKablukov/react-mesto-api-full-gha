{"ast":null,"code":"class Auth {\n  constructor(baseUrl) {\n    this._baseUrl = baseUrl;\n  }\n\n  // _handleResponse\n  _getResponseData(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // registerUser\n  register(email, password) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  //authorizeUser\n  authorize(email, password) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    }).then(res => this._getResponseData(res)).then(data => {\n      return data;\n    });\n  }\n\n  //logoutUser\n  logout() {\n    return fetch(`${this._baseUrl}/signout`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._getResponseData(res));\n  }\n  checkToken() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._getResponseData(res)).then(data => {\n      return data;\n    });\n  }\n}\nconst auth = new Auth({\n  baseUrl: 'http://localhost:3000'\n});\nexport { auth, Auth };\n/*\nexport const BASE_URL = 'http://localhost:3000';\n\n// _handleResponse\nfunction getResponseData(res) {\n  if (res.ok) {\n    return res.json();\n  } else {\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n}\n\n// registerUser\nexport function register(email, password) {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ password, email }),\n  }).then((res) => getResponseData(res));\n}\n\n//authorizeUser\nexport function authorize(email, password) {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ email, password }),\n  })\n    .then((res) => getResponseData(res))\n    .then((data) => {\n      return data;\n    });\n}\n\nexport function checkToken() {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  })\n    .then((res) => getResponseData(res))\n    .then((data) => {\n      return data;\n    });\n}\n\nexport function logout() {\n  return fetch(`${BASE_URL}/signout`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then((res) => getResponseData(res));\n}\n*/","map":{"version":3,"names":["Auth","constructor","baseUrl","_baseUrl","_getResponseData","res","ok","json","Promise","reject","status","register","email","password","fetch","method","headers","Accept","body","JSON","stringify","then","authorize","data","logout","credentials","checkToken","auth"],"sources":["/Users/dimakablukov/Downloads/react-mesto-api-full-gha-main/frontend/src/utils/auth.js"],"sourcesContent":["class Auth {\n  constructor(baseUrl) {\n    this._baseUrl = baseUrl;\n  }\n\n  // _handleResponse\n  _getResponseData(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // registerUser\n  register(email, password) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //authorizeUser\n  authorize(email, password) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    })\n      .then((res) => this._getResponseData(res))\n      .then((data) => {\n        return data;\n      });\n  }\n\n  //logoutUser\n  logout() {\n    return fetch(`${this._baseUrl}/signout`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }).then((res) => this._getResponseData(res));\n  }\n\n  checkToken() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => this._getResponseData(res))\n      .then((data) => {\n        return data;\n      });\n  }\n}\n\nconst auth = new Auth({\n  baseUrl: 'http://localhost:3000',\n});\n\nexport { auth, Auth };\n/*\nexport const BASE_URL = 'http://localhost:3000';\n\n// _handleResponse\nfunction getResponseData(res) {\n  if (res.ok) {\n    return res.json();\n  } else {\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n}\n\n// registerUser\nexport function register(email, password) {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ password, email }),\n  }).then((res) => getResponseData(res));\n}\n\n//authorizeUser\nexport function authorize(email, password) {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ email, password }),\n  })\n    .then((res) => getResponseData(res))\n    .then((data) => {\n      return data;\n    });\n}\n\nexport function checkToken() {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  })\n    .then((res) => getResponseData(res))\n    .then((data) => {\n      return data;\n    });\n}\n\nexport function logout() {\n  return fetch(`${BASE_URL}/signout`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then((res) => getResponseData(res));\n}\n*/"],"mappings":"AAAA,MAAMA,IAAI,CAAC;EACTC,WAAWA,CAACC,OAAO,EAAE;IACnB,IAAI,CAACC,QAAQ,GAAGD,OAAO;EACzB;;EAEA;EACAE,gBAAgBA,CAACC,GAAG,EAAE;IACpB,IAAIA,GAAG,CAACC,EAAE,EAAE;MACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;IACnB;IACA,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAChD;;EAEA;EACAC,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IACxB,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACX,QAAS,SAAQ,EAAE;MACtCY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC,CAACQ,IAAI,CAAEhB,GAAG,IAAK,IAAI,CAACD,gBAAgB,CAACC,GAAG,CAAC,CAAC;EAC9C;;EAEA;EACAiB,SAASA,CAACV,KAAK,EAAEC,QAAQ,EAAE;IACzB,OAAOC,KAAK,CAAE,GAAE,IAAI,CAACX,QAAS,SAAQ,EAAE;MACtCY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAER,KAAK;QAAEC;MAAS,CAAC;IAC1C,CAAC,CAAC,CACCQ,IAAI,CAAEhB,GAAG,IAAK,IAAI,CAACD,gBAAgB,CAACC,GAAG,CAAC,CAAC,CACzCgB,IAAI,CAAEE,IAAI,IAAK;MACd,OAAOA,IAAI;IACb,CAAC,CAAC;EACN;;EAEA;EACAC,MAAMA,CAAA,EAAG;IACP,OAAOV,KAAK,CAAE,GAAE,IAAI,CAACX,QAAS,UAAS,EAAE;MACvCY,MAAM,EAAE,MAAM;MACdU,WAAW,EAAE,SAAS;MACtBT,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE;MAClB;IACF,CAAC,CAAC,CAACI,IAAI,CAAEhB,GAAG,IAAK,IAAI,CAACD,gBAAgB,CAACC,GAAG,CAAC,CAAC;EAC9C;EAEAqB,UAAUA,CAAA,EAAG;IACX,OAAOZ,KAAK,CAAE,GAAE,IAAI,CAACX,QAAS,WAAU,EAAE;MACxCY,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE;MAClB;IACF,CAAC,CAAC,CACCI,IAAI,CAAEhB,GAAG,IAAK,IAAI,CAACD,gBAAgB,CAACC,GAAG,CAAC,CAAC,CACzCgB,IAAI,CAAEE,IAAI,IAAK;MACd,OAAOA,IAAI;IACb,CAAC,CAAC;EACN;AACF;AAEA,MAAMI,IAAI,GAAG,IAAI3B,IAAI,CAAC;EACpBE,OAAO,EAAE;AACX,CAAC,CAAC;AAEF,SAASyB,IAAI,EAAE3B,IAAI;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}