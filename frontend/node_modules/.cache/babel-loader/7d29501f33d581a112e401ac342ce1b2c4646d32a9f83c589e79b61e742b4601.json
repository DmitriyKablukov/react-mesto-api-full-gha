{"ast":null,"code":"export const BASE_URL = 'http://localhost:3000';\n\n// _handleResponse\nfunction getResponseData(res) {\n  if (res.ok) {\n    return res.json();\n  } else {\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n}\n\n// registerUser\nexport function register(email, password) {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      password,\n      email\n    })\n  }).then(res => getResponseData(res));\n}\n\n//authorizeUser\nexport function authorize(email, password) {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(res => getResponseData(res)).then(data => {\n    return data;\n  });\n}\nexport function logout() {\n  return fetch(`${BASE_URL}/signout`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => getResponseData(res));\n}\nexport function checkToken() {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json'\n    }\n  }).then(res => getResponseData(res)).then(data => {\n    return data;\n  });\n}\n\n/*\nclass Auth {\n  constructor(baseUrl) {\n    this._baseUrl = baseUrl;\n  }\n\n  // _handleResponse\n  _getResponseData(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // registerUser\n  register(email, password) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //authorizeUser\n  authorize(email, password) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    })\n      .then((res) => this._getResponseData(res))\n      .then((data) => {\n        return data;\n      });\n  }\n\n  //logoutUser\n  logout() {\n    return fetch(`${this._baseUrl}/signout`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }).then((res) => this._getResponseData(res));\n  }\n\n  checkToken() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => this._getResponseData(res))\n      .then((data) => {\n        return data;\n      });\n  }\n}\n\nconst auth = new Auth({\n  baseUrl: 'http://localhost:3000',\n});\n\nexport { auth, Auth };\n*/","map":{"version":3,"names":["BASE_URL","getResponseData","res","ok","json","Promise","reject","status","register","email","password","fetch","method","credentials","headers","Accept","body","JSON","stringify","then","authorize","data","logout","checkToken"],"sources":["/Users/dimakablukov/Downloads/react-mesto-api-full-gha-main/frontend/src/utils/auth.js"],"sourcesContent":["export const BASE_URL = 'http://localhost:3000';\n\n// _handleResponse\nfunction getResponseData(res) {\n  if (res.ok) {\n    return res.json();\n  } else {\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n}\n\n// registerUser\nexport function register(email, password) {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ password, email }),\n  }).then((res) => getResponseData(res));\n}\n\n//authorizeUser\nexport function authorize(email, password) {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify({ email, password }),\n  })\n    .then((res) => getResponseData(res))\n    .then((data) => {\n      return data;\n    });\n}\n\nexport function logout() {\n  return fetch(`${BASE_URL}/signout`, {\n    method: 'POST',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  }).then((res) => getResponseData(res));\n}\n\nexport function checkToken() {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    credentials: 'include',\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n  })\n    .then((res) => getResponseData(res))\n    .then((data) => {\n      return data;\n    });\n}\n\n/*\nclass Auth {\n  constructor(baseUrl) {\n    this._baseUrl = baseUrl;\n  }\n\n  // _handleResponse\n  _getResponseData(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n\n  // registerUser\n  register(email, password) {\n    return fetch(`${this._baseUrl}/signup`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    }).then((res) => this._getResponseData(res));\n  }\n\n  //authorizeUser\n  authorize(email, password) {\n    return fetch(`${this._baseUrl}/signin`, {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ email, password }),\n    })\n      .then((res) => this._getResponseData(res))\n      .then((data) => {\n        return data;\n      });\n  }\n\n  //logoutUser\n  logout() {\n    return fetch(`${this._baseUrl}/signout`, {\n      method: 'POST',\n      credentials: 'include',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    }).then((res) => this._getResponseData(res));\n  }\n\n  checkToken() {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'GET',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((res) => this._getResponseData(res))\n      .then((data) => {\n        return data;\n      });\n  }\n}\n\nconst auth = new Auth({\n  baseUrl: 'http://localhost:3000',\n});\n\nexport { auth, Auth };\n*/\n"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,uBAAuB;;AAE/C;AACA,SAASC,eAAeA,CAACC,GAAG,EAAE;EAC5B,IAAIA,GAAG,CAACC,EAAE,EAAE;IACV,OAAOD,GAAG,CAACE,IAAI,CAAC,CAAC;EACnB,CAAC,MAAM;IACL,OAAOC,OAAO,CAACC,MAAM,CAAE,WAAUJ,GAAG,CAACK,MAAO,EAAC,CAAC;EAChD;AACF;;AAEA;AACA,OAAO,SAASC,QAAQA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACxC,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,WAAW,EAAE,SAAS;IACtBC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAER,QAAQ;MAAED;IAAM,CAAC;EAC1C,CAAC,CAAC,CAACU,IAAI,CAAEjB,GAAG,IAAKD,eAAe,CAACC,GAAG,CAAC,CAAC;AACxC;;AAEA;AACA,OAAO,SAASkB,SAASA,CAACX,KAAK,EAAEC,QAAQ,EAAE;EACzC,OAAOC,KAAK,CAAE,GAAEX,QAAS,SAAQ,EAAE;IACjCY,MAAM,EAAE,MAAM;IACdC,WAAW,EAAE,SAAS;IACtBC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAET,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CACCS,IAAI,CAAEjB,GAAG,IAAKD,eAAe,CAACC,GAAG,CAAC,CAAC,CACnCiB,IAAI,CAAEE,IAAI,IAAK;IACd,OAAOA,IAAI;EACb,CAAC,CAAC;AACN;AAEA,OAAO,SAASC,MAAMA,CAAA,EAAG;EACvB,OAAOX,KAAK,CAAE,GAAEX,QAAS,UAAS,EAAE;IAClCY,MAAM,EAAE,MAAM;IACdC,WAAW,EAAE,SAAS;IACtBC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB;EACF,CAAC,CAAC,CAACI,IAAI,CAAEjB,GAAG,IAAKD,eAAe,CAACC,GAAG,CAAC,CAAC;AACxC;AAEA,OAAO,SAASqB,UAAUA,CAAA,EAAG;EAC3B,OAAOZ,KAAK,CAAE,GAAEX,QAAS,WAAU,EAAE;IACnCY,MAAM,EAAE,KAAK;IACbC,WAAW,EAAE,SAAS;IACtBC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB;EACF,CAAC,CAAC,CACCI,IAAI,CAAEjB,GAAG,IAAKD,eAAe,CAACC,GAAG,CAAC,CAAC,CACnCiB,IAAI,CAAEE,IAAI,IAAK;IACd,OAAOA,IAAI;EACb,CAAC,CAAC;AACN;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}